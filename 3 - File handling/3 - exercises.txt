1) Python module os contains operating system commands.
a) Import the module and use os.getcwd to get the current working directory and print that on screen.
b) Afterward change the working directory with os.chdir("path_to_the_new_directory").
c) Use os.listdir() to check the contents of your current working directory.

2) Reading CSV files
A CSV file (short for comma-separated values), is a text file which contains data separated by a predetermined character. 
The most common characters used for this purpose are the comma , and the semicolon ;, but any character is, in principle, possible.
CSV files are commonly used to store records of different kinds. 
Many database and spreadsheet programs, such as Excel, can import and export data in CSV format, which makes data exchange between different systems easy.
We can go through the lines in a file with a for loop, but how can we separate the different fields on a single line? 
Python has a string method split for just this purpose. The method takes the separator character(s) as a string argument, and returns the contents of the target string as a list of strings, separated at the separator.

Let's assume we have a file grades.csv, which contains names of students and the grades they received on some courses. 
Each line has the data of a single student, and the data is separated by a semicolon.

Content of the grades.csv:
Paul;5;4;5;3;4;5;5;4;2;4
Beth;3;4;2;4;4;2;3;1;3;3
Ruth;4;5;5;4;5;5;4;5;4;4

Explore the following Python code related to the afore mentioned grades.csv.

with open('grades.csv') as new_file:
    for line in new_file:
        line = line.replace('\n', '')
        parts = line.split(";")
        name = parts[0]
        grades = parts[1:]
        print("Name:", name)
        print('Grades:', grades)

a) Run the code and explain shortly in your own words what it does.

b) Why is the replace() used here, why is it important? 
Note that there's another string method in Python that can also be used for this kind of tasks called strip(). 
Familiarize yourself with strip(), what are the main differences to replace()?

3) Given a CSV file named "fruits.csv" with the following format:
banana;6.50
apple;4.95
orange;8.0
...etc...

Implement a function named read_fruits, which reads the file and returns a dictionary based on the content. 
In the dictionary, use the name of the fruit as the key and the price as the value. 
Serialize this dictionary into a JSON file called fruits.json. Make sure fruits.json is written on disk.

4) Write a program which works as a simple diary. The diary entries should be saved in a file called diary.txt. 
When the program is executed, it should first read any and all entries already in the file. Then request a new entry from the user and store that in diary.txt.
---
The expected output of the program on first run with the text in <>'s requested as input from the user:
Earlier entries:
New diary entry: <I did not sleep much today.>
Diary saved
The expected output of the second run of the same program with the text in <>'s requested as input from the user:
Earlier entries:
I did not sleep much today.
New diary entry: <Today was considerably better.>
Diary saved
---